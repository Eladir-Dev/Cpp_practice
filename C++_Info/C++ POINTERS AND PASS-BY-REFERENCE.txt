C++ POINTERS AND PASS-BY-REFERENCE  
==================================

Overview  
--------

In C++, functions can receive arguments in two main ways:

1. **Pass-by-value**: A copy of the variable is passed. Changes inside the function do not affect the original.
2. **Pass-by-reference**: The actual variable is passed, allowing the function to modify its value.

There are two common ways to implement pass-by-reference:

- Using **reference variables** (`int&`)
- Using **pointers** (`int*`)

Both allow functions to modify the original variable, but they differ in syntax and usage.

---

Pass-by-Reference Using References  
----------------------------------

```cpp
#include <iostream>
using namespace std;

void increment(int& value) {
    value += 1;
}

int main() {
    int number = 5;
    increment(number);
    cout << "After increment: " << number << endl; // Output: 6
    return 0;
}
```

Explanation:  
- `int& value` is a reference to `number`.
- Changes to `value` affect `number` directly.

---

Pass-by-Reference Using Pointers  
--------------------------------

```cpp
#include <iostream>
using namespace std;

void increment(int* value) {
    *value += 1;
}

int main() {
    int number = 5;
    increment(&number);
    cout << "After increment: " << number << endl; // Output: 6
    return 0;
}
```

Explanation:  
- `int* value` is a pointer to `number`.
- `&number` passes the address of `number`.
- `*value` accesses and modifies the actual value at that address.

---

Summary  
-------

- Use `int&` for cleaner syntax when you want to modify variables directly.
- Use `int*` when working with dynamic memory or when you need to pass null or optional values.
- Both methods avoid copying and allow functions to affect the original data.

---
